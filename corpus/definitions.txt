===========
Function declaration - no params
===========

void() NoParamFunction1;

---

(source_file
    (function_declaration
        result: (simple_type)
        parameters: (parameter_list)
        name: (identifier)))

===========
Function declaration - multiple params
===========

float(entity param1, entity param2) TestFunction4;

---

(source_file
    (function_declaration
        result: (simple_type)
        parameters: (parameter_list
            (parameter
                type: (simple_type)
                name: (identifier))
            (parameter
                type: (simple_type)
                name: (identifier)))
        name: (identifier)))


===========
Builtin function definition
===========

void() NoParamFunction1 = #12;
void(int param1, int param2) ParamFunction1 = #2;

---

(source_file
    (function_definition
        result: (simple_type)
        parameters: (parameter_list)
        name: (identifier)
        (builtin_literal))
    (function_definition
        result: (simple_type)
        parameters: (parameter_list
            (parameter
                type: (simple_type)
                name: (identifier))
            (parameter
                type: (simple_type)
                name: (identifier)))
        name: (identifier)
        (builtin_literal)))

===========
Empty block function definition
===========

void(int param1, int param2) EmptyFunction1 = {};

---

(source_file
    (function_definition
        result: (simple_type)
        parameters: (parameter_list
            (parameter
                type: (simple_type)
                name: (identifier))
            (parameter
                type: (simple_type)
                name: (identifier)))
        name: (identifier)
        body: (compound_statement)))

===========
Empty block function definition - vararg
===========

void(int param1, int param2, ...) EmptyFunction1 = {};

---

(source_file
    (function_definition
        result: (simple_type)
        parameters: (parameter_list
            (parameter
                type: (simple_type)
                name: (identifier))
            (parameter
                type: (simple_type)
                name: (identifier)))
        name: (identifier)
        body: (compound_statement)))

===========
Block function definition
===========

void(int param1, int param2) Function1 = {
    a + b;
};

---

(source_file
    (function_definition
        result: (simple_type)
        parameters: (parameter_list
            (parameter
                type: (simple_type)
                name: (identifier))
            (parameter
                type: (simple_type)
                name: (identifier)))
        name: (identifier)
        body: (compound_statement
          (binary_expression
            (identifier)
            (identifier)))))

===========
Function definition - C-style def
===========

void cstyle_fun1(vector arg) {
	call(arg);
};

---

(source_file
    (function_definition
        result: (simple_type)
        name: (identifier)
        parameters: (parameter_list
                        (parameter
                            type: (simple_type)
                            name: (identifier)))
        body: (compound_statement
          (funcall_expression
            function: (identifier)
            arg: (identifier)))))

===========
Frame function definition
===========

void(int param1, int param2) FrameFunction1 = [ $frame1, next ] {};

---

(source_file
    (function_definition
        result: (simple_type)
        parameters: (parameter_list
            (parameter
                type: (simple_type)
                name: (identifier))
            (parameter
                type: (simple_type)
                name: (identifier)))
        name: (identifier)
        (frame_identifier)
        (identifier)
        body: (compound_statement)))

===========
Constant definitions
===========

float constFloat = 11.123;
int constInt = 1;
int constNegInt = -1;
int constInt = '1 -12 3';
vector constFloat = '1.0 -12.12 3.4';
string constString = "bla bla bla";

---

(source_file
    (constant_definition
        type: (simple_type)
        name: (identifier)
        value: (numeric_literal))
    (constant_definition
        type: (simple_type)
        name: (identifier)
        value: (numeric_literal))
    (constant_definition
        type: (simple_type)
        name: (identifier)
        value: (numeric_literal))
    (constant_definition
        type: (simple_type)
        name: (identifier)
        value: (vector_literal
                   (numeric_literal)
                   (numeric_literal)
                   (numeric_literal)))
    (constant_definition
        type: (simple_type)
        name: (identifier)
        value: (vector_literal
                   (numeric_literal)
                   (numeric_literal)
                   (numeric_literal)))
    (constant_definition
        type: (simple_type)
        name: (identifier)
        value: (string_literal)))

===========
Variable definitions
===========

float floatField;
int multiple1, multiple2, multple3;

---

(source_file
    (variable_definition
        type: (simple_type)
        name: (identifier))
    (variable_definition
        type: (simple_type)
        name: (identifier)
        name: (identifier)
        name: (identifier)))

===========
Field definitions
===========

.float floatField;
.int multiple1, multiple2, multple3;

---

(source_file
    (field_definition
        type: (simple_type)
        name: (identifier))
    (field_definition
        type: (simple_type)
        name: (identifier)
        name: (identifier)
        name: (identifier)))

===========
Modelgen pragmas
===========

$flags 8
$base arg1
$cd /path/to/something
$frame frame1 frame2 frame3
$modelname name
$scale '10 10 10'

---

(source_file
    (modelgen_pragma)
    (modelgen_pragma)
    (modelgen_pragma)
    (modelgen_pragma)
    (modelgen_pragma)
    (modelgen_pragma))
