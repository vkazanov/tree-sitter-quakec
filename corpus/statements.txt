===========
If statement - simple statement guard
===========

void() Function = {
    if (a) b = 1;
};

---

(source_file
    (function_definition
        result: (simple_type)
        parameters: (parameter_list)
        name: (identifier)
        body: (compound_statement
            (if_statement
                condition: (identifier)
                (assignment_expression
                    target: (identifier)
                    value: (numeric_literal))))))

===========
If statement - simple alternative
===========

void() Function = {
    if (a) b = 1;
    else b = 2;
};

---

(source_file
    (function_definition
        result: (simple_type)
        parameters: (parameter_list)
        name: (identifier)
        body:
        (compound_statement
            (if_statement
                condition: (identifier)
                (assignment_expression
                    target: (identifier)
                    value: (numeric_literal))
                (assignment_expression
                    target: (identifier)
                    value: (numeric_literal))))))

===========
If statement - mutiple simple branches
===========

void() Function = {
    if (a)
        b = 1;
    else if (b)
        c = 1;
    else
        d = 1;
};

---

(source_file
    (function_definition
        (simple_type)
        (parameter_list)
        (identifier)
        (compound_statement
            (if_statement
                (identifier)
                (assignment_expression
                    (identifier)
                    (numeric_literal))
                (if_statement
                    (identifier)
                    (assignment_expression
                        (identifier)
                        (numeric_literal))
                    (assignment_expression
                        (identifier)
                        (numeric_literal)))))))

===========
If statement - single compound statement guard
===========

void() Function = {
    if (a) {
        b = 1;
    }
};

---

(source_file
    (function_definition
        (simple_type)
        (parameter_list)
        (identifier)
        (compound_statement
            (if_statement
                (identifier)
                (compound_statement
                    (assignment_expression
                        (identifier)
                        (numeric_literal)))))))

===========
If statement - multiple compound statements guard
===========

void() Function = {
    if (a) {
        b = 1;
        ab = 33;
        abc = 444.1;
    }
};

---

(source_file
    (function_definition
        (simple_type)
        (parameter_list)
        (identifier)
        (compound_statement
            (if_statement
                (identifier)
                (compound_statement
                    (assignment_expression
                        (identifier)
                        (numeric_literal))
                    (assignment_expression
                        (identifier)
                        (numeric_literal))
                    (assignment_expression
                        (identifier)
                        (numeric_literal)))))))


===========
If statement - simple else
===========

void() Function = {
    if (a) b = 1; else b = 2;
};

---

(source_file
    (function_definition
        (simple_type)
        (parameter_list)
        (identifier)
        (compound_statement
        (if_statement
            (identifier)
            (assignment_expression
                (identifier)
                (numeric_literal))
            (assignment_expression
                (identifier)
                (numeric_literal))))))

===========
If statement - compound else
===========

void() Function = {
    if (a) b = 1;
    else {
        b = 2;
    }
};

---

(source_file
    (function_definition
        result: (simple_type)
        parameters: (parameter_list)
        name: (identifier)
        body:
        (compound_statement
            (if_statement
                condition: (identifier)
                (assignment_expression
                    target: (identifier)
                    value: (numeric_literal))
                (compound_statement
                    (assignment_expression
                        target: (identifier)
                        value: (numeric_literal)))))))

===========
While statement - simple
===========

void() Function = {
    while (a) b = 1;
};

---

(source_file
    (function_definition
        result: (simple_type)
        parameters: (parameter_list)
        name: (identifier)
        body: (compound_statement
           (while_statement
               condition: (identifier)
               (assignment_expression
                   target: (identifier)
                   value: (numeric_literal))))))

===========
While statement - compound
===========

void() Function = {
    while (a) {
        b = 1;
        a = 22;
    }
};

---

(source_file
    (function_definition
        (simple_type)
        (parameter_list)
        (identifier)
        (compound_statement
            (while_statement
                (identifier)
                (compound_statement
                    (assignment_expression
                        (identifier)
                        (numeric_literal))
                    (assignment_expression
                        (identifier)
                        (numeric_literal)))))))

===========
Do/while statement - simple
===========

void() Function = {
    do b = 1;
    while (a);
};

---

(source_file
    (function_definition
        (simple_type)
        (parameter_list)
        (identifier)
        (compound_statement
            (do_while_statement
                (assignment_expression
                    (identifier)
                    (numeric_literal))
                (identifier)))))

===========
Do/while statement - compound
===========

void() Function = {
    do {
        b = 1;
        a = 22;
    } while (a);
};

---

(source_file
    (function_definition
        result: (simple_type)
        parameters: (parameter_list)
        name: (identifier)
        body: (compound_statement
         (do_while_statement
            (compound_statement
              (assignment_expression
                target: (identifier)
                value: (numeric_literal))
              (assignment_expression
                target: (identifier)
                value: (numeric_literal)))
             condition: (identifier)))))

===========
Return statement
===========

void() Function = {
    return 111;
};

---

(source_file
    (function_definition
        (simple_type)
        (parameter_list)
        (identifier)
        (compound_statement
            (return_statement
                (numeric_literal)))))

===========
Return statement - empty
===========

void() Function = {
    return;
};

---

(source_file
    (function_definition
        (simple_type)
        (parameter_list)
        (identifier)
        (compound_statement
            (return_statement))))

===========
Variable definition statement
===========

void() Function = {
    int a;
    int a[] = {1};
    local int b;
    int c = 1, d = 2;
};

---

(source_file
    (function_definition
        result: (simple_type)
        parameters: (parameter_list)
        name: (identifier)
        body: (compound_statement
            (variable_definition
              type: (simple_type)
              name: (identifier))
            (variable_definition
              type: (simple_type)
              name: (identifier)
              value: (array_literal
              (numeric_literal)))
            (variable_definition
              type: (simple_type)
              name: (identifier))
            (variable_definition
              type: (simple_type)
              name: (identifier)
              value: (numeric_literal)
              name: (identifier)
              value: (numeric_literal)))))

===========
Variable definition statement - expression init
===========

void() Function = {
    int a = funexpr(arg), b = 1;
};

---

(source_file
    (function_definition
        result: (simple_type)
        parameters: (parameter_list)
        name: (identifier)
        body: (compound_statement
            (variable_definition
              type: (simple_type)
              name: (identifier)
              value: (funcall_expression
                  function: (identifier)
                  arg: (identifier))
              name: (identifier)
              value: (numeric_literal)))))

===========
Variable definition statement - init a vector with an array;
===========

void() Function = {
    vector vec = {10.1, funcall(), 13};
};

---

(source_file
    (function_definition
        result: (simple_type)
        parameters: (parameter_list)
        name: (identifier)
        body: (compound_statement
            (variable_definition
              type: (simple_type)
              name: (identifier)
            value: (array_literal
              (numeric_literal)
              (funcall_expression
                function: (identifier))
              (numeric_literal))))))

===========
Variable definition statement - multiple, no init
===========

float(entity arg) fun =
{
	local vector var1, var2;
};

---

(source_file
    (function_definition
        result: (simple_type)
        parameters: (parameter_list
          (parameter
            type: (simple_type)
            name: (identifier)))
        name: (identifier)
        body: (compound_statement
          (variable_definition
            type: (simple_type)
            name: (identifier)
            name: (identifier)))))

===========
Variable definition statement - local function ref variable
===========

void Function()
{
    void() local_fun;
}

---

(source_file
    (function_definition
        result: (simple_type)
        name: (identifier)
        parameters: (parameter_list)
        body: (compound_statement
          (variable_definition
            type: (simple_type)
            name: (identifier)
            name: (identifier)))))

===========
Variable definition statement - typedef
===========

typedef struct
{
    string mdl;
    float frame;
}poseInfo;

---

(source_file
    (function_definition
        result: (simple_type)
        name: (identifier)
        parameters: (parameter_list)
        body: (compound_statement
          (variable_definition
            type: (simple_type)
            name: (identifier)
            name: (identifier)))))


===========
Expression statement
===========

void() Function = {
    12;
    abc;
};

---

(source_file
    (function_definition
        (simple_type)
        (parameter_list)
        (identifier)
        (compound_statement
            (numeric_literal)
            (identifier))))

===========
Switch statement
===========

void() Function = {
    switch (a) {
        case 0:
        case 1:
            1;
        case 2:
            2;
            break;
        default:
            break;
    }
};

---

(source_file
    (function_definition
         result: (simple_type)
         parameters: (parameter_list)
         name: (identifier)
         body: (compound_statement
             (switch_statement
                 condition: (identifier)
                    (compound_statement
                      (case_statement
                        value: (numeric_literal))
                      (case_statement
                        value: (numeric_literal)
                        (numeric_literal))
                      (case_statement
                        value: (numeric_literal)
                            (numeric_literal)
                            (break_statement))
                      (case_statement
                        (break_statement)))))))
