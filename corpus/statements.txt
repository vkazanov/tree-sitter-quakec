===========
If statement - simple statement guard
===========

void() Function = {
    if (a) b = 1;
};

---

(source_file
    (function_definition
        result: (simple_type)
        parameters: (parameter_list)
        name: (identifier)
        body: (compound_statement
            (if_statement
                condition: (identifier)
                (assignment_expression
                    target: (identifier)
                    value: (numeric_literal))))))

===========
If statement - single compound statement guard
===========

void() Function = {
    if (a) {
        b = 1;
    };
};

---

(source_file
    (function_definition
        (simple_type)
        (parameter_list)
        (identifier)
        (compound_statement
            (if_statement
                (identifier)
                (compound_statement
                    (assignment_expression
                        (identifier)
                        (numeric_literal)))))))

===========
If statement - multiple compound statements guard
===========

void() Function = {
    if (a) {
        b = 1;
        ab = 33;
        abc = 444.1;
    };
};

---

(source_file
    (function_definition
        (simple_type)
        (parameter_list)
        (identifier)
        (compound_statement
            (if_statement
                (identifier)
                (compound_statement
                    (assignment_expression
                        (identifier)
                        (numeric_literal))
                    (assignment_expression
                        (identifier)
                        (numeric_literal))
                    (assignment_expression
                        (identifier)
                        (numeric_literal)))))))


===========
If statement - simple else
===========

void() Function = {
    if (a) b = 1 else b = 2;
};

---

(source_file
    (function_definition
        (simple_type)
        (parameter_list)
        (identifier)
        (compound_statement
        (if_statement
            (identifier)
            (assignment_expression
                (identifier)
                (numeric_literal))
            (assignment_expression
                (identifier)
                (numeric_literal))))))

===========
If statement - compound else
===========

void() Function = {
    if (a) b = 1
    else {
        b = 2;
    };
};

---

(source_file
    (function_definition
        result: (simple_type)
        parameters: (parameter_list)
        name: (identifier)
        body:
        (compound_statement
            (if_statement
                condition: (identifier)
                (assignment_expression
                    target: (identifier)
                    value: (numeric_literal))
                (compound_statement
                    (assignment_expression
                        target: (identifier)
                        value: (numeric_literal)))))))

===========
While statement - simple
===========

void() Function = {
    while (a) b = 1;
};

---

(source_file
    (function_definition
        result: (simple_type)
        parameters: (parameter_list)
        name: (identifier)
        body: (compound_statement
           (while_statement
               condition: (identifier)
               (assignment_expression
                   target: (identifier)
                   value: (numeric_literal))))))

===========
While statement - compound
===========

void() Function = {
    while (a) {
        b = 1;
        a = 22;
    };
};

---

(source_file
    (function_definition
        (simple_type)
        (parameter_list)
        (identifier)
        (compound_statement
            (while_statement
                (identifier)
                (compound_statement
                    (assignment_expression
                        (identifier)
                        (numeric_literal))
                    (assignment_expression
                        (identifier)
                        (numeric_literal)))))))

===========
Do/while statement - simple
===========

void() Function = {
    do b = 1
    while (a);
};

---

(source_file
    (function_definition
        (simple_type)
        (parameter_list)
        (identifier)
        (compound_statement
            (do_while_statement
                (assignment_expression
                    (identifier)
                    (numeric_literal))
                (identifier)))))

===========
Do/while statement - compound
===========

void() Function = {
    do {
        b = 1;
        a = 22;
    } while (a);
};

---

(source_file
    (function_definition
        result: (simple_type)
        parameters: (parameter_list)
        name: (identifier)
        body: (compound_statement
         (do_while_statement
            (compound_statement
              (assignment_expression
                target: (identifier)
                value: (numeric_literal))
              (assignment_expression
                target: (identifier)
                value: (numeric_literal)))
             condition: (identifier)))))

===========
Return statement
===========

void() Function = {
    return 111;
};

---

(source_file
    (function_definition
        (simple_type)
        (parameter_list)
        (identifier)
        (compound_statement
            (return_statement
                (numeric_literal)))))

===========
Return statement - empty
===========

void() Function = {
    return;
};

---

(source_file
    (function_definition
        (simple_type)
        (parameter_list)
        (identifier)
        (compound_statement
            (return_statement))))

===========
Variable definition statement
===========

void() Function = {
    int a;
    local int b;
    int c = 1, d = 2;
};

---

(source_file
    (function_definition
        result: (simple_type)
        parameters: (parameter_list)
        name: (identifier)
        body: (compound_statement
            (variable_definition_statement
              type: (simple_type)
              name: (identifier))
            (variable_definition_statement
              type: (simple_type)
              name: (identifier))
            (variable_definition_statement
              type: (simple_type)
              name: (identifier)
              (numeric_literal)
              (identifier)
              (numeric_literal)))))

===========
Expression statement
===========

void() Function = {
    12;
    abc;
};

---

(source_file
    (function_definition
        (simple_type)
        (parameter_list)
        (identifier)
        (compound_statement
            (numeric_literal)
            (identifier))))
