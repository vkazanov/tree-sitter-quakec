===========
Unary expression - simple
===========

void() Function = {
    +a;
    ++b;
    -a;
};

---

(source_file
    (function_definition
        (simple_type)
        (parameter_list)
        (identifier)
        (compound_statement
            (unary_expression
              (identifier))
            (unary_expression
              (unary_expression
                (identifier)))
            (unary_expression
              (identifier)))))

===========
Unary expression - negation
===========

void() Function = {
    !a;
    !(a+b);
};

---

(source_file
    (function_definition
        (simple_type)
        (parameter_list)
        (identifier)
        (compound_statement
            (negation_expression
              (identifier))
            (negation_expression
              (parenthesized_expression
                (binary_expression
                    (identifier)
                    (identifier)))))))

===========
Unary expression - mixed
===========

void() Function = {
    -a+1;
};

---

(source_file
    (function_definition
        (simple_type)
        (parameter_list)
        (identifier)
        (compound_statement
          (binary_expression
            (unary_expression
              (identifier))
            (numeric_literal)))))

===========
Binary expression - relational
===========

void() Function = {
    1 == b;
    1 != a;
};

---

(source_file
    (function_definition
        (simple_type)
        (parameter_list)
        (identifier)
        (compound_statement
          (binary_expression
            (numeric_literal)
            (identifier))
        (binary_expression
            (numeric_literal)
            (identifier)))))


===========
Binary expression - addition
===========

void() Function = {
    1 + b;
};

---

(source_file
    (function_definition
        (simple_type)
        (parameter_list)
        (identifier)
        (compound_statement
          (binary_expression
            (numeric_literal)
            (identifier)))))

===========
Field deref expression
===========

void() Function = {
    self.field;
};

---

(source_file
    (function_definition
        result: (simple_type)
        parameters: (parameter_list)
        name: (identifier)
        body: (compound_statement
          (field_expression
            argument: (identifier)
            field: (identifier)))))

===========
Binary expression - subtraction
===========

void() Function = {
    1 - b;
};

---

(source_file
    (function_definition
        (simple_type)
        (parameter_list)
        (identifier)
        (compound_statement
          (binary_expression
            (numeric_literal)
            (identifier)))))

===========
Binary expression - multiplication / division
===========

void() Function = {
    1 * b;
    1 / b;
};

---

(source_file
    (function_definition
        (simple_type)
        (parameter_list)
        (identifier)
        (compound_statement
          (binary_expression
            (numeric_literal)
            (identifier))
          (binary_expression
            (numeric_literal)
            (identifier)))))

===========
Funcall expression
===========

void() Function = {
    call1();
    call2(arg1, arg2, arg3);
    call3(call4());
};

---

(source_file
    (function_definition
        result: (simple_type)
        parameters: (parameter_list)
        name: (identifier)
        body: (compound_statement
          (funcall_expression
            name: (identifier))
          (funcall_expression
            name: (identifier)
            arg: (identifier)
            arg: (identifier)
            arg: (identifier))
          (funcall_expression
            name: (identifier)
            arg: (funcall_expression
              name: (identifier))))))

===========
Assignment expression
===========

void() Function = {
   ab = -1;
};

---

(source_file
    (function_definition
        result: (simple_type)
        parameters: (parameter_list)
        name: (identifier)
        body:
        (compound_statement
            (assignment_expression
               target: (identifier)
               value: (numeric_literal)))))

===========
Assignment expression - chain
===========

void() Function = {
   ab = cd = 3;
};

---

(source_file
    (function_definition
        result: (simple_type)
        parameters: (parameter_list)
        name: (identifier)
        body:
        (compound_statement
            (assignment_expression
               target: (identifier)
               value: (assignment_expression
                          target: (identifier)
                          value: (numeric_literal))))))

===========
Assignment expression - special (+= -= *= /=)
===========

void() Function = {
   ab *= -1;
   b /= -1.1;
   b11 += 101.1;
   c -= d;
};



---

(source_file
    (function_definition
        result: (simple_type)
        parameters: (parameter_list)
        name: (identifier)
        body:
        (compound_statement
            (assignment_expression
               target: (identifier)
               value: (numeric_literal))
            (assignment_expression
               target: (identifier)
               value: (numeric_literal))
            (assignment_expression
               target: (identifier)
               value: (numeric_literal))
            (assignment_expression
               target: (identifier)
               value: (identifier)))))

===========
Assignment expression - field
===========

void() Function = {
   self.ab *= -1;
};

---

(source_file
    (function_definition
        result: (simple_type)
        parameters: (parameter_list)
        name: (identifier)
        body:
        (compound_statement
            (assignment_expression
               target: (field_expression
                   argument: (identifier)
                   field: (identifier))
               value: (numeric_literal)))))
