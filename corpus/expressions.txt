===========
Unary expression - simple
===========

void() Function = {
    +a;
    ++b;
    -a;
};

---

(source_file
    (function_definition
        (simple_type)
        (parameter_list)
        (identifier)
        (unary_expression
          (identifier))
        (unary_expression
          (unary_expression
            (identifier)))
        (unary_expression
          (identifier))))

===========
Unary expression - mixed
===========

void() Function = {
    -a+1;
};

---

(source_file
    (function_definition
        (simple_type)
        (parameter_list)
        (identifier)
        (binary_expression
          (unary_expression
            (identifier))
          (literal))))


===========
Binary expression - addition
===========

void() Function = {
    1 + b;
};

---

(source_file
    (function_definition
        (simple_type)
        (parameter_list)
        (identifier)
        (binary_expression
          (literal)
          (identifier))))

===========
Binary expression - subtraction
===========

void() Function = {
    1 - b;
};

---

(source_file
    (function_definition
        (simple_type)
        (parameter_list)
        (identifier)
        (binary_expression
          (literal)
          (identifier))))

===========
Binary expression - multiplication / division
===========

void() Function = {
    1 * b;
    1 / b;
};

---

(source_file
    (function_definition
        (simple_type)
        (parameter_list)
        (identifier)
        (binary_expression
          (literal)
          (identifier))
        (binary_expression
          (literal)
          (identifier))))

===========
Funcall expression
===========

void() Function = {
    call1();
    call2(arg1, arg2, arg3);
    call3(call4());
};

---

(source_file
    (function_definition
        (simple_type)
        (parameter_list)
        (identifier)
        (funcall_expression
            (identifier))
        (funcall_expression
            (identifier)
            (identifier)
            (identifier)
            (identifier))
        (funcall_expression
            (identifier)
            (funcall_expression
                (identifier)))))
